Program.Sub.Preflight.Start

Variable.UDT.uPOError.Define("sPONum",String,PONum)
Variable.UDT.uPOError.Define("sPart",String,Part)
Variable.UDT.uPOError.Define("sLot",String,Lot)
Variable.UDT.uPOError.Define("sSerial",String,Serial)
Variable.UDT.uPOError.Define("sUM",String,UM)
Variable.UDT.uPOError.Define("fQty",Float,Qty)
Variable.UDT.uPOError.Define("sBin",String,Bin)
Variable.UDT.uPOError.Define("sReason",String,Reason)
Variable.UDT.uPOError.Define("iBIRunID",Long,BIRunID)
Variable.uGlobal.uPOError.Declare("uPOError")

Variable.UDT.uPORcpt.Define("PO",String,"PO")
Variable.UDT.uPORcpt.Define("PO_LINE",String,"PO_LINE")
Variable.UDT.uPORcpt.Define("SEQ",String,"SEQ")
Variable.UDT.uPORcpt.Define("RECEIVER_NO",String,"RECEIVED_NO")
Variable.UDT.uPORcpt.Define("RECEIVED_DATE",Date,"RECEIVED_DATE")
Variable.UDT.uPORcpt.Define("LBL_CREATE_DATE",Date,"LBL_CREATE_DATE")
Variable.UDT.uPORcpt.Define("PART",String,"PART")
Variable.UDT.uPORcpt.Define("LOCN",String,"LOCN")
Variable.UDT.uPORcpt.Define("PROD_LINE",String,"PROD_LINE")
Variable.UDT.uPORcpt.Define("DESCR",String,"DESCR")
Variable.UDT.uPORcpt.Define("PO_QTY_ORDERED",Float,"PO_QTY_ORDERED")
Variable.UDT.uPORcpt.Define("INV_QTY_ORDERED",Float,"INV_QTY_ORDERED")
Variable.UDT.uPORcpt.Define("PO_QTY_TO_INSP",Float,"PO_QTY_TO_INSP")
Variable.UDT.uPORcpt.Define("INV_QTY_TO_INSP",Float,"INV_QTY_TO_INSP")
Variable.UDT.uPORcpt.Define("PO_QTY_REC",Float,"PO_QTY_REC")
Variable.UDT.uPORcpt.Define("INV_QTY_REC",Float,"INV_QTY_REC")
Variable.UDT.uPORcpt.Define("PO_COST",Float,"PO_COST")
Variable.UDT.uPORcpt.Define("INV_COST",Float,"INV_COST")
Variable.UDT.uPORcpt.Define("LOT",String,"LOT")
Variable.UDT.uPORcpt.Define("HEAT",String,"HEAT")
Variable.UDT.uPORcpt.Define("SERIAL",String,"SERIAL")
Variable.UDT.uPORcpt.Define("INV_UM",String,"INV_UM")
Variable.UDT.uPORcpt.Define("PO_UM",String,"PO_UM")
Variable.UDT.uPORcpt.Define("WO",String,"WO")
Variable.UDT.uPORcpt.Define("WO_SUFFIX",String,"WO_SUFFIX")
Variable.UDT.uPORcpt.Define("WO_SEQ",String,"WO_SEQ")
Variable.UDT.uPORcpt.Define("SO",String,"SO")
Variable.UDT.uPORcpt.Define("SO_LINE",String,"SO_LINE")
Variable.UDT.uPORcpt.Define("SO_SEQ",String,"SO_SEQ")
Variable.UDT.uPORcpt.Define("PACKING_NO",String,"PACK_LIST")
Variable.UDT.uPORcpt.Define("VENDOR",String,"VENDOR_NO")
Variable.UDT.uPORcpt.Define("VENDOR_NAME",String,"VENDOR_NAME")
Variable.UDT.uPORcpt.Define("CLOSE_FLAG",Boolean,"CLOSE_FLAG")
Variable.UDT.uPORcpt.Define("GL_ACCOUNT",String,"ACCOUNT")
Variable.UDT.uPORcpt.Define("USER_1",String,"USER_1")
Variable.UDT.uPORcpt.Define("USER_2",String,"USER_2")
Variable.UDT.uPORcpt.Define("USER_3",String,"USER_3")
Variable.UDT.uPORcpt.Define("USER_4",String,"USER_4")
Variable.UDT.uPORcpt.Define("USER_5",String,"USER_5")
Variable.UDT.uPORcpt.Define("USER_ID",String,"USER_ID")
Variable.UDT.uPORcpt.Define("CUST_PO",String,"CUST_PO")
Variable.UDT.uPORcpt.Define("SORT_CODE",String,"SORT_CODE")
Variable.UDT.uPORcpt.Define("MFG_NAME",String,"MFG_NAME")
Variable.UDT.uPORcpt.Define("MFG_PART",String,"MFG_PART")
Variable.UDT.uPORcpt.Define("CUST_PART",String,"CUST_PART")
Variable.UDT.uPORcpt.Define("EXCH_COST",Float,"EXCH_COST")
Variable.UDT.uPORcpt.Define("EXCH_RATE",Float,"EXCH_RATE")
Variable.UDT.uPORcpt.Define("EXCH_DATE",Date,"EXCH_DATE")
Variable.UDT.uPORcpt.Define("EXCH_CURR",String,"EXCH_CURR")
Variable.UDT.uPORcpt.Define("REQ_NO",String,"REQ_NO")
Variable.UDT.uPORcpt.Define("REQ_LINE",String,"REQ_LINE")
Variable.UDT.uPORcpt.Define("DEPT",String,"DEPT")
Variable.UDT.uPORcpt.Define("WARRANTY_MONTHS",Long,"WARRANTY_MONTHS")
Variable.UDT.uPORcpt.Define("EXPIRE_DATE",Date,"EXPIRE_DATE")
Variable.UDT.uPORcpt.Define("LOT_USER_1",String,"LOT_USER_1")
Variable.UDT.uPORcpt.Define("LOT_USER_2",String,"LOT_USER_2")
Variable.UDT.uPORcpt.Define("LOT_USER_3",String,"LOT_USER_3")
Variable.UDT.uPORcpt.Define("LOT_USER_4",String,"LOT_USER_4")
Variable.UDT.uPORcpt.Define("LOT_USER_5",String,"LOT_USER_5")
Variable.UDT.uPORcpt.Define("LOT_USER_6",String,"LOT_USER_6")
Variable.UDT.uPORcpt.Define("LOT_USER_7",String,"LOT_USER_7")
Variable.UDT.uPORcpt.Define("LOT_USER_8",String,"LOT_USER_8")
Variable.UDT.uPORcpt.Define("LOT_USER_9",String,"LOT_USER_9")
Variable.UDT.uPORcpt.Define("BIN",String,"BIN")
Variable.UDT.uPORcpt.Define("BIRUNID",Long,"RUNID")
Variable.UDT.uPORcpt.Define("QTY_ON_LABEL",Float,"QTY_ON_LABEL")
Variable.uGlobal.uPORcpt.Declare("uPORcpt")
Variable.Global.iBIRunID.Declare(Long,0)
Variable.Global.iBILogID.Declare(Long,0)
Variable.UDT.uPOLines.Define("Part_MFG_No",String,Part_MFG_NO)
Variable.UDT.uPOLines.Define("Vendor",String,Vendor)
Variable.UDT.uPOLines.Define("Part",String,Part)
Variable.UDT.uPOLines.Define("Record_No",String,Record_No)
Variable.UDT.uPOLines.Define("Cost",Float,Cost)
Variable.uGlobal.uPOLines.Declare("uPOLines")

Program.Sub.Preflight.End
Program.Sub.Main.Start
v.Local.sRet.Declare(String)
v.Local.sPartRet.Declare(String)
v.Local.sSheet.Declare(String)
V.Local.sRow.Declare(String)
v.Local.sSQL.Declare(String)
v.Local.sPONumber.Declare(String)
v.Local.sErrorLine.Declare(String)
v.Local.sErrorFile.Declare(String)
v.Local.sFile.Declare(String)
v.Local.iCount.Declare(Long)
v.Local.iUCount.Declare(Long)
v.Local.iPOError.Declare(Long)
v.Local.iHandle.Declare(Long)

F.ODBC.Connection!conx.OpenConnection(v.Ambient.PDSN, v.Ambient.PUser, v.Ambient.PPass)

F.Global.BI.GetRunID(V.Global.iBIRunID)

'F.Global.BI.StartLogging(V.Global.iBIRunID,2818,-1,"PU_PO_Receipt_2818.lab",V.Global.iBILogID)
F.Global.BI.StartLogging(V.Global.iBIRunID,-1,-1,"",V.Global.iBILogID)

v.uGlobal.uPORcpt.Redim(-1, -1)
v.uGlobal.uPOError.Redim(-1, -1)
F.Intrinsic.UI.ShowOpenFileDialog("", "xlsx|*xlsx|xls|*xls", v.Caller.FilesDir, v.Local.sRet)

F.Intrinsic.Control.If(v.Local.sRet, !=, "***CANCEL***")
	f.Automation.MSExcel.ReadSpreadsheet(v.Local.sRet, v.Local.sSheet)
	F.Intrinsic.String.Split(v.Local.sSheet,"$!$", v.Local.sSheet)

	F.Intrinsic.Control.For(v.Local.iCount, 1, v.Local.sSheet.UBound, 1)
		F.Intrinsic.String.Split(v.Local.sSheet(v.Local.iCount), "*!*", v.Local.sRow)
		F.Intrinsic.Control.If(v.Local.sRow(0).Trim, !=,"")
			F.Intrinsic.String.LPad(v.Local.sRow(0), "0", 7, v.Local.sPONumber)
			'Get PO Vendor
			F.Intrinsic.String.Build("Select UCase(Part_MFG_NO), Vendor, UCase(Part), Left (Record_No, 3) as Record_No, Cost from v_PO_Lines where Purchase_Order = '{0}'", v.Local.sPONumber, v.Local.sSQL)
			F.ODBC.Connection!conx.OpenLocalRecordsetRO("rst", v.Local.sSQL)
			F.Intrinsic.Control.If(v.ODBC.conx!rst.EOF, =, False)
				F.Intrinsic.Variable.LoadUDTFromRecordset("conx", "rst", "v.uGlobal.uPOLines", False)
				F.Intrinsic.Variable.UDTMultiSeek(v.uGlobal.uPOLines!Part_MFG_No, v.Local.sRow(1).UCase, v.Local.sRet)
				F.Intrinsic.Variable.UDTMultiSeek(v.uGlobal.uPOLines!Part, v.Local.sRow(1).UCase, v.Local.sPartRet)
				F.Intrinsic.Control.If(v.Local.sRet, !=, "")
					F.Intrinsic.Control.If(v.uGlobal.uPORcpt.UBound, =, -1)
						v.uGlobal.uPORcpt.Redim(0,0)
					F.Intrinsic.Control.Else
						F.Intrinsic.Math.Add(v.Local.iUCount, 1, v.Local.iUCount)
						v.uGlobal.uPORcpt.RedimPreserve(0, v.Local.iUCount)
					F.Intrinsic.Control.EndIf
					F.Intrinsic.String.Split(v.Local.sRet, "*!*", v.Local.sRet)
					'Vendor Part number
					v.uGlobal.uPORcpt(v.Local.iUCount)!PO.Set(v.Local.sPONumber)
					v.uGlobal.uPORcpt(v.Local.iUCount)!PART.Set(v.uGlobal.uPOLines(v.Local.sRet(0))!Part)
					V.uGlobal.uPORcpt(v.Local.iUCount)!PO_LINE.Set(v.uGlobal.uPOLines(v.Local.sRet(0))!Record_No)
					v.uGlobal.uPORcpt(v.Local.iUCount)!INV_COST.Set(v.uGlobal.uPOLines(v.Local.sRet(0))!Cost)
					v.uGlobal.uPORcpt(v.Local.iUCount)!PO_QTY_REC.Set(v.Local.sRow(5))
				F.Intrinsic.Control.ElseIf(v.Local.sPartRet, !=, "")
					F.Intrinsic.Control.If(v.uGlobal.uPORcpt.UBound, =, -1)
						v.uGlobal.uPORcpt.Redim(0,0)
					F.Intrinsic.Control.Else
						F.Intrinsic.Math.Add(v.Local.iUCount, 1, v.Local.iUCount)
						v.uGlobal.uPORcpt.RedimPreserve(0, v.Local.iUCount)
					F.Intrinsic.Control.EndIf
					F.Intrinsic.String.Split(v.Local.sPartRet, "*!*", v.Local.sPartRet)
					'GSS Part number
					v.uGlobal.uPORcpt(v.Local.iUCount)!PO.Set(v.Local.sPONumber)
					v.uGlobal.uPORcpt(v.Local.iUCount)!PART.Set(v.uGlobal.uPOLines(v.Local.sPartRet(0))!Part)
					V.uGlobal.uPORcpt(v.Local.iUCount)!PO_LINE.Set(v.uGlobal.uPOLines(v.Local.sPartRet(0))!Record_No)
					v.uGlobal.uPORcpt(v.Local.iUCount)!INV_COST.Set(v.uGlobal.uPOLines(v.Local.sPartRet(0))!Cost)
					v.uGlobal.uPORcpt(v.Local.iUCount)!PO_QTY_REC.Set(v.Local.sRow(5))
				F.Intrinsic.Control.Else
					'Part not found
					F.Intrinsic.Control.If(v.uGlobal.uPOError.UBound, =, -1)
						v.uGlobal.uPOError.Redim(0,0)
					F.Intrinsic.Control.Else
						F.Intrinsic.Math.Add(v.Local.iPOError, 1, v.Local.iPOError)
						v.uGlobal.uPOError.RedimPreserve(0,v.Local.iPOError)
					F.Intrinsic.Control.EndIf
					v.uGlobal.uPOError(v.Local.iPOError)!sPart.Set(v.Local.sRow(1))
					v.uGlobal.uPOError(v.Local.iPOError)!sPONum.Set(v.Local.sPONumber)
					v.uGlobal.uPOError(v.Local.iPOError)!sLot.Set(v.Local.sRow(2))
					v.uGlobal.uPOError(v.Local.iPOError)!sBin.Set(v.Local.sRow(6))
					v.uGlobal.uPOError(v.Local.iPOError)!sSerial.Set(v.Local.sRow(3))
					v.uGlobal.uPOError(v.Local.iPOError)!fQty.Set(v.Local.sRow(5))
					v.uGlobal.uPOError(v.Local.iPOError)!sReason.Set("Part Not Found!")
				F.Intrinsic.Control.EndIf
			F.Intrinsic.Control.Else
				'PO not found
				F.Intrinsic.Control.If(v.uGlobal.uPOError.UBound, =, -1)
					v.uGlobal.uPOError.Redim(0,0)
				F.Intrinsic.Control.Else
					F.Intrinsic.Math.Add(v.Local.iPOError, 1, v.Local.iPOError)
					v.uGlobal.uPOError.RedimPreserve(0,v.Local.iPOError)
				F.Intrinsic.Control.EndIf
				v.uGlobal.uPOError(v.Local.iPOError)!sPart.Set(v.Local.sRow(1))
				v.uGlobal.uPOError(v.Local.iPOError)!sPONum.Set(v.Local.sPONumber)
				v.uGlobal.uPOError(v.Local.iPOError)!sLot.Set(v.Local.sRow(2))
				v.uGlobal.uPOError(v.Local.iPOError)!sBin.Set(v.Local.sRow(6))
				v.uGlobal.uPOError(v.Local.iPOError)!sSerial.Set(v.Local.sRow(3))
				v.uGlobal.uPOError(v.Local.iPOError)!fQty.Set(v.Local.sRow(5))
				v.uGlobal.uPOError(v.Local.iPOError)!sReason.Set("PO Number Not Found!")

			F.Intrinsic.Control.EndIf
			F.ODBC.conx!rst.Close
		F.Intrinsic.Control.EndIf
	f.Intrinsic.Control.Next(v.Local.iCount)
	'set date value.
	F.Intrinsic.Control.CallSub(upload)
	F.Intrinsic.Variable.UDTSetMemberValue(v.uGlobal.uPORcpt!RECEIVED_DATE, v.Ambient.Date)
	F.Intrinsic.Variable.UDTSetMemberValue(v.uGlobal.uPORcpt!BIRUNID, v.Global.iBIRunID)
	F.Global.BI.StopLogging(V.Global.iBILogID)
	'create the labels
	F.Global.BI.PrintCodesoftLabelFromUDT(v.Global.iBIRunID,v.Global.iBILogID,"v.uGlobal.uPORcpt","","",True)
	F.Intrinsic.String.Build("{0}\POError{1}.txt", v.Caller.TempDir, v.Caller.Terminal, v.Local.sFile)
	F.Intrinsic.File.GetHandle(v.Local.iHandle)
	F.Intrinsic.String.Build("PO #{0}Part{0}Lot{0}{0}Bin{0}Serial{0}UM{0}Qty{0}Reason{1}{1}", v.Ambient.Tab, v.Ambient.NewLine, v.Local.sErrorFile)
	F.Intrinsic.Control.For(v.Local.iCount, v.uGlobal.uPOError.LBound, v.uGlobal.uPOError.UBound, 1)
		'Create error report
		F.Intrinsic.String.Build("{0}{1}{2}",v.Local.sErrorFile,v.uGlobal.uPOError(v.Local.iCount)!sPONum, v.Local.sErrorLine)
		v.Local.sErrorLine.Set(v.uGlobal.uPOError(v.Local.iCount)!sPONum)
		F.Intrinsic.String.Build("{0}{1}{2}{1}{3}{1}{4}", v.Local.sErrorLine, v.Ambient.Tab, v.uGlobal.uPOError(v.Local.iCount)!sPart,v.uGlobal.uPOError(v.Local.iCount)!sLot, v.uGlobal.uPOError(v.Local.iCount)!sBin, v.Local.sErrorLine)
		F.Intrinsic.String.Build("{0}{1}{2}{1}{3}{1}{4}", v.Local.sErrorLine, v.Ambient.Tab, v.uGlobal.uPOError(v.Local.iCount)!sSerial, v.uGlobal.uPOError(v.Local.iCount)!sUM, v.uGlobal.uPOError(v.Local.iCount)!fQty, v.Local.sErrorLine)
		F.Intrinsic.String.Build("{0}{1}{2}", v.Local.sErrorLine, v.Ambient.Tab, v.uGlobal.uPOError(v.Local.iCount)!sReason, v.Local.sErrorLine)
		F.Intrinsic.String.Build("{0}{1}{2}", v.Local.sErrorFile, v.Ambient.NewLine, v.Local.sErrorLine, v.Local.sErrorFile)
	F.Intrinsic.Control.Next(v.Local.iCount)
	'save to file
	F.Intrinsic.File.String2File(v.Local.sFile, v.Local.sErrorFile)
	F.Intrinsic.Task.ShellExec(v.Local.iHandle, "OPEN", v.Local.sFile, "", "", 1)
'	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.EndIf

Program.Sub.Main.End

Program.Sub.Upload.Start
v.Local.sUpLine.Declare(String)
v.Local.sUpFile.Declare(String)
v.Local.sFileDir.Declare(String)
v.Local.sFileName.Declare(String)
v.Local.sDate.Declare(String)
v.Local.iCount.Declare(Long)
'Price per piece

F.Intrinsic.Control.If(v.uGlobal.uPORcpt.UBound, !=, -1)
	F.Intrinsic.Control.For(v.Local.iCount, 0, v.uGlobal.uPORcpt.UBound, 1)
		v.Local.sDate.Set(v.Ambient.Date)
		F.Intrinsic.String.Format(v.Local.sDate, "YYMMDD", v.Local.sDate)
		F.Intrinsic.String.Build("{0},{1},{2},{3},{4},{5},{6},{7},,{8},Y,,,,,,,,,,,,,,,",v.uGlobal.uPORcpt(v.Local.iCount)!PO, v.uGlobal.uPORcpt(v.Local.iCount)!PO_LINE,v.uGlobal.uPORcpt(v.Local.iCount)!BIN, v.uGlobal.uPORcpt(v.Local.iCount)!LOT, v.uGlobal.uPORcpt(v.Local.iCount)!HEAT, v.uGlobal.uPORcpt(v.Local.iCount)!SERIAL, v.Local.sDate, v.uGlobal.uPORcpt(v.Local.iCount)!PO_QTY_REC,v.uGlobal.uPORcpt(v.Local.iCount)!INV_COST ,v.Local.sUpLine)
		'save to upfile
		F.Intrinsic.String.Build("{0}{1}{2}", v.Local.sUpFile, v.Local.sUpLine, v.Ambient.NewLine, v.Local.sUpFile)
	F.Intrinsic.Control.Next(v.Local.iCount)
F.Intrinsic.Control.EndIf

'Save the file
F.Intrinsic.String.Build("P{0}RCPTS{1}.txt", v.Caller.CompanyCode, v.Caller.Terminal, v.Local.sFileName)
F.Intrinsic.String.Build("{0}\{1}", v.Caller.FilesDir, v.Local.sFileName, v.Local.sFileDir)
F.Intrinsic.File.String2File(v.Local.sFileDir, v.Local.sUpFile)
'call the callwrapper
F.Global.General.CallWrapperSync(6016, v.Local.sFileName)

Program.Sub.Upload.End

Program.Sub.Unload.Start
F.ODBC.Connection!conx.Close
F.Intrinsic.Control.End
Program.Sub.Unload.End

Program.Sub.Comments.Start
${$0$}$GCG_RBC_7237_POUpload$}$SKT$}$11/9/2015 1:44:17 PM$}$False
${$2$}$$}$$}$0$}$0$}$$}$11/20/2015 3:59:18 PM$}$6016 Takes a File Name as the parameter
${$3$}$0$}$$}$0$}$-1$}$$}$12:00:00 AM$}$This project will run from a custom menu item that will read in an excel file and create a PO receipt upload from the data.  The part number in the excel file can be either a GSS part number or a Vendor part number.  After all PO's have been read in the PO receipt upload will be called using callwrapper 6016.  After the upload the PO reciept label will print for each order.  If the excel file contains a PO Number or a Part number that is not valid then an error report will be created and opened for the user.
Program.Sub.Comments.End